---
title: "MVE Blue Seeds"
author: "Brooke Wainwright"
format: html
editor: visual
---

## Background

The Sevilleta Long Term Ecological Research (LTER) Program (Socorro, NM) rolled out a novel climate change experiment in 2019: the Mean-Variance Experiment (MVE). The experiment has been replicated in four ecosystems to date but the focus of this document is on the experimental infrastructure found in the Great Plains Grassland ecosystem, dominated by blue grama grass (*Bouteloua gracilis*). Hence Mean-Variance Blue or MVE Blue. The ecosystem is dominated by blue grama grass but the adjacent ecosystem, Chihuahuan Desert Grassland, is dominated by black grama grass (*Bouteloua eriopoda*). Great Plains Grassland extends northward throughout central North America while Chihuahuan Desert Grassland extends southward into Mexico. Thus, under a more arid climate, we would expect Chihuahuan Desert Grassland to expand it's range northward. The experimental infrastructure is set near the ecotone of these two ecosystems. More information on this experiment can be found here: <https://sevlter.unm.edu/mean-variance-experiment/>. To test the recruitment dynamics of these dominant plants under climate change, we added seeds of each species to the experimental plots from 2019-2023 and tracked their germination and survival biweekly during the growing season and monthly during the dormant season.

## Objectives

1.  Read in seed monitoring data for all five years, treatments, soil moisture data, climate data.
2.  Explore data, provide summary statistics.
3.  Create graph of typical climate for temperature and precipitation.
5.  Find the best model for the germination data using year and mean and variance treatments as predictors
6.  Graph germination by year, mean, and variance by species.
7.  Find best model of survival by species, year, and mean and variance treatments. Or a model for each species. Graph.
8.  Figure out the 1-3 events each year where 90-95% of germination occurs and isolate germination and soil moisture to those events and build a model to understand how soil moisture determines germination probability. Graph.
9.  Characterize die off/survival. Is it gradual and consistent or happen in major events like germination. Graph?
10. Figure out how to test for legacy effects on germination and/or survival. Graph.

## Setup

Read in necessary packages.

```{r}
#| message: false
#| warning: false

library(readr)
library(dplyr)
library(tidyr)
library(tidyverse)
library(ggplot2)
library(viridis) # colorblind friendly color palette
library(reshape2)
library(vegan)
library(lme4)
library(car)
library(readxl)
library(googlesheets4)
library(lubridate)
library(bbmle)
library(lmtest)
```

## Read Data

Bring in seed monitoring data for all five years, bring in keys, bring in soil moisture data, bring in climate data.

```{r seed census data hidden}
#| eval: false # Do not evaluate this chunk
#| echo: false # Do not show this chunk in the final rendered document

print("Dont run this code")
# bring in each year of data (2019-2023, 5 years total)

# De-authorize googlesheets to bypass log-in
googlesheets4::gs4_deauth()

# Load in the data from google drive (make loop or function)
blue_2019 <- as.data.frame(googlesheets4::read_sheet(
  ss="https://docs.google.com/spreadsheets/d/1BDSYfiaHBwYWqZEIeu27-rVX_AMyd407eGlDyf7hc6g/edit?gid=1889905658#gid=1889905658"))

blue_2020 <- as.data.frame(googlesheets4::read_sheet(
  ss="https://docs.google.com/spreadsheets/d/1RfcWQR4zSo-6zbAwZbR5s9DhxPF_gderfNvnlOFTxLE/edit#gid=974160277"))

blue_2021 <- as.data.frame(googlesheets4::read_sheet(
  ss="https://docs.google.com/spreadsheets/d/1Y6MBlHEawdBZKeywWfAKHqT4wDQxGLlTCyE1NG0Mfe8/edit#gid=1947016736"))

blue_2022 <- as.data.frame(googlesheets4::read_sheet(
  ss="https://docs.google.com/spreadsheets/d/1bixaeVyjCgqI7d3j5kNcQwR9zRAd9duY9ipoA2uWvaY/edit#gid=1207134008"))

blue_2023 <- as.data.frame(googlesheets4::read_sheet(
  ss="https://docs.google.com/spreadsheets/d/1712pb0TIKS5K3FU3-pRHc9oI3K6uavZMcF8a3YW8SHY/edit#gid=0"))

# Change column header dates to be readable by R (make loop or fxn)
names(blue_2019)[str_detect(names(blue_2019), "\\d{5}")] <- 
  format(as.Date(as.numeric(names(blue_2019)[str_detect(names(blue_2019), "\\d{5}")]), origin = "1899-12-30"), "%d-%b-%y")

names(blue_2020)[str_detect(names(blue_2020), "\\d{5}")] <- 
  format(as.Date(as.numeric(names(blue_2020)[str_detect(names(blue_2020), "\\d{5}")]), origin = "1899-12-30"), "%d-%b-%y")

names(blue_2021)[str_detect(names(blue_2021), "\\d{5}")] <- 
  format(as.Date(as.numeric(names(blue_2021)[str_detect(names(blue_2021), "\\d{5}")]), origin = "1899-12-30"), "%d-%b-%y")

names(blue_2022)[str_detect(names(blue_2022), "\\d{5}")] <- 
  format(as.Date(as.numeric(names(blue_2022)[str_detect(names(blue_2022), "\\d{5}")]), origin = "1899-12-30"), "%d-%b-%y")

names(blue_2023)[str_detect(names(blue_2023), "\\d{5}")] <- 
  format(as.Date(as.numeric(names(blue_2023)[str_detect(names(blue_2023), "\\d{5}")]), origin = "1899-12-30"), "%d-%b-%y")

# Give the cohort name for each dataframe (make loop or fxn)
blue_2019$Add_Year <- 2019
blue_2020$Add_Year <- 2020
blue_2021$Add_Year <- 2021
blue_2022$Add_Year <- 2022
blue_2023$Add_Year <- 2023

# convert columns to numeric (make loop or fxn)
blue_2019 <- blue_2019 %>%
  mutate(across( # mutate observations in multiple columns
    matches("\\d{1,2}-"), # that contain digits in the column name
    as.numeric)) 
blue_2020 <- blue_2020 %>%
  mutate(across( # mutate observations in multiple columns
    matches("\\d{1,2}-"), # that contain digits in the column name
    as.numeric)) 
blue_2021 <- blue_2021 %>%
  mutate(across( # mutate observations in multiple columns
    matches("\\d{1,2}-"), # that contain digits in the column name
    as.numeric)) 
blue_2022 <- blue_2022 %>%
  mutate(across( # mutate observations in multiple columns
    matches("\\d{1,2}-"), # that contain digits in the column name
    as.numeric)) 
blue_2023 <- blue_2023 %>%
  mutate(across( # mutate observations in multiple columns
    matches("\\d{1,2}-"), # that contain digits in the column name
    as.numeric)) 

# make TP ID (make loop or fxn)
blue_2019$TP_ID<- 
  with(blue_2019, 
       paste0(Add_Year, Plot, Species, Corner, Row, Column))
blue_2020$TP_ID<- 
  with(blue_2020, 
       paste0(Add_Year, Plot, Species, Corner, Row, Column))
blue_2021$TP_ID<- 
  with(blue_2021, 
       paste0(Add_Year, Plot, Species, Corner, Row, Column))
blue_2022$TP_ID<- 
  with(blue_2022, 
       paste0(Add_Year, Plot, Species, Corner, Row, Column))
blue_2023$TP_ID<- 
  with(blue_2023, 
       paste0(Add_Year, Plot, Species, Corner, Row, Column))

# pivot long (make loop or fxn)
blue_2019_long <-
  pivot_longer(blue_2019,
               cols = c("2019-09-07":"2019-10-13"),
               names_to = "Obs_Date",
               values_to = "Germ.binom") %>%
  mutate(Obs_Date=as.Date(Obs_Date,format="%Y-%m-%d")) # Format dates
unique(blue_2019_long$Obs_Date)

blue_2020_long <-
  pivot_longer(blue_2020,
               cols = c("7/31/2020":"6/2/2023"),
               names_to = "Obs_Date",
               values_to = "Germ.binom") %>%
  mutate(Obs_Date=as.Date(Obs_Date,format="%m/%d/%Y")) # Format dates
unique(blue_2020_long$Obs_Date)

head(blue_2021)
blue_2021_long <-
  pivot_longer(blue_2021,
               cols = c("2021-07-26":"2024-05-06"),
               names_to = "Obs_Date",
               values_to = "Germ.binom") %>%
  mutate(Obs_Date=as.Date(Obs_Date,format="%Y-%m-%d")) # Format dates
unique(blue_2021_long$Obs_Date)

blue_2022_long <-
  pivot_longer(blue_2022,
               cols = c("2022-07-05":"2024-04-03"),
               names_to = "Obs_Date",
               values_to = "Germ.binom") %>%
  mutate(Obs_Date=as.Date(Obs_Date,format="%m-%d-%Y")) # Format dates
unique(blue_2022_long$Obs_Date)

blue_2023_long <-
  pivot_longer(blue_2023,
               cols = c("2023-07-07":"2024-08-05"),
               names_to = "Obs_Date",
               values_to = "Germ.binom") %>%
  mutate(Obs_Date=as.Date(Obs_Date,format="%Y-%m-%d")) 
# Format dates
unique(blue_2023_long$Obs_Date)

# reduce germ to 1 (make loop or function)
blue_2019_long <-
  blue_2019_long %>%
  mutate(
    Germ.binom =
      case_when(
        Germ.binom == 1 ~ 1
        , Germ.binom == 2 ~ 1
        , Germ.binom == 3 ~ 1
        , Germ.binom == 0 ~ 0
      )
  )
blue_2020_long <-
  blue_2020_long %>%
  mutate(
    Germ.binom =
      case_when(
        Germ.binom == 1 ~ 1
        , Germ.binom == 2 ~ 1
        , Germ.binom == 3 ~ 1
        , Germ.binom == 0 ~ 0
      )
  )
blue_2021_long <-
  blue_2021_long %>%
  mutate(
    Germ.binom =
      case_when(
        Germ.binom == 1 ~ 1
        , Germ.binom == 2 ~ 1
        , Germ.binom == 3 ~ 1
        , Germ.binom == 0 ~ 0
      )
  )
blue_2022_long <-
  blue_2022_long %>%
  mutate(
    Germ.binom =
      case_when(
        Germ.binom == 1 ~ 1
        , Germ.binom == 2 ~ 1
        , Germ.binom == 3 ~ 1
        , Germ.binom == 0 ~ 0
      )
  )
blue_2023_long <-
  blue_2023_long %>%
  mutate(
    Germ.binom =
      case_when(
        Germ.binom == 1 ~ 1
        , Germ.binom == 2 ~ 1
        , Germ.binom == 3 ~ 1
        , Germ.binom == 0 ~ 0
      )
  )

# order by germ binom then by obs date in order to rm duplicates (make loop or function)
blue_2019_long_reduced <- blue_2019_long[order(-blue_2019_long$Germ.binom, blue_2019_long$Obs_Date), ]
blue_2020_long_reduced <- blue_2020_long[order(-blue_2020_long$Germ.binom, blue_2020_long$Obs_Date), ]
blue_2021_long_reduced <- blue_2021_long[order(-blue_2021_long$Germ.binom, blue_2021_long$Obs_Date), ]
blue_2022_long_reduced <- blue_2022_long[order(-blue_2022_long$Germ.binom, blue_2022_long$Obs_Date), ]
blue_2023_long_reduced <- blue_2023_long[order(-blue_2023_long$Germ.binom, blue_2023_long$Obs_Date), ]

# remove duplicates (make loop or function)
blue_2019_long_reduced <- blue_2019_long_reduced %>%
  distinct(TP_ID, Plot, Corner, Species, Row, Column, Add_Year, .keep_all = TRUE)
blue_2020_long_reduced <- blue_2020_long_reduced %>%
  distinct(TP_ID, Plot, Corner, Species, Row, Column, Add_Year, .keep_all = TRUE)
blue_2021_long_reduced <- blue_2021_long_reduced %>%
  distinct(TP_ID, Plot, Corner, Species, Row, Column, Add_Year, .keep_all = TRUE)
blue_2022_long_reduced <- blue_2022_long_reduced %>%
  distinct(TP_ID, Plot, Corner, Species, Row, Column, Add_Year, .keep_all = TRUE)
blue_2023_long_reduced <- blue_2023_long_reduced %>%
  distinct(TP_ID, Plot, Corner, Species, Row, Column, Add_Year, .keep_all = TRUE)

# Get each year ready fro rbind (make loop or fxn)

blue_2019_long_reduced <-
  blue_2019_long_reduced %>%
  select(
    Plot,
    Corner,
    Species,
    Row,
    Column,
    TP_ID,
    Add_Year,
    Obs_Date,
    Germ.binom
  )
blue_2020_long_reduced <-
  blue_2020_long_reduced %>%
  select(
    Plot,
    Corner,
    Species,
    Row,
    Column,
    TP_ID,
    Add_Year,
    Obs_Date,
    Germ.binom
  )
blue_2021_long_reduced <-
  blue_2021_long_reduced %>%
  select(
    Plot,
    Corner,
    Species,
    Row,
    Column,
    TP_ID,
    Add_Year,
    Obs_Date,
    Germ.binom
  )
blue_2022_long_reduced <-
  blue_2022_long_reduced %>%
  select(
    Plot,
    Corner,
    Species,
    Row,
    Column,
    TP_ID,
    Add_Year,
    Obs_Date,
    Germ.binom
  )
blue_2023_long_reduced <-
  blue_2023_long_reduced %>%
  select(
    Plot,
    Corner,
    Species,
    Row,
    Column,
    TP_ID,
    Add_Year,
    Obs_Date,
    Germ.binom
  )

blue_19_23_reduced <- rbind(
  blue_2019_long_reduced,
  blue_2020_long_reduced,
  blue_2021_long_reduced,
  blue_2022_long_reduced,
  blue_2023_long_reduced
  )

write_csv(blue_19_23_reduced, "germ_19_23.csv")
```

Create an alternative dataset that preserves raw data. Create a dataset for modeling based on cohort year and one for soil moisture modeling.

```{r alternate long form germ}
# Get each year ready fro rbind (make loop or fxn)

blue_2019_long <-
  blue_2019_long %>%
  select(
    Plot,
    Corner,
    Species,
    Row,
    Column,
    TP_ID,
    Add_Year,
    Obs_Date,
    Germ.binom
  )
blue_2020_long <-
  blue_2020_long %>%
  select(
    Plot,
    Corner,
    Species,
    Row,
    Column,
    TP_ID,
    Add_Year,
    Obs_Date,
    Germ.binom
  )
blue_2021_long <-
  blue_2021_long %>%
  select(
    Plot,
    Corner,
    Species,
    Row,
    Column,
    TP_ID,
    Add_Year,
    Obs_Date,
    Germ.binom
  )
blue_2022_long <-
  blue_2022_long %>%
  select(
    Plot,
    Corner,
    Species,
    Row,
    Column,
    TP_ID,
    Add_Year,
    Obs_Date,
    Germ.binom
  )
blue_2023_long <-
  blue_2023_long %>%
  select(
    Plot,
    Corner,
    Species,
    Row,
    Column,
    TP_ID,
    Add_Year,
    Obs_Date,
    Germ.binom
  )

blue_19_23_long_raw <- rbind(
  blue_2019_long,
  blue_2020_long,
  blue_2021_long,
  blue_2022_long,
  blue_2023_long
  )

write_csv(blue_19_23_long_raw, "germ_19_23_long_raw.csv")
# use this for soil moisture

# Make a dataframe for each years crops of available seeds to germ
# first, though, look at germination over time by data for each year added -- I expect that we can reduce each one the year planted and the year after, so as to not inflate zeros

## LEFT OFF HERE



```


```{r treatment data hidden}
#| eval: false # Do not evaluate this chunk
#| echo: false # Do not show this chunk in the final rendered document

trts<-read.csv("meanvar_blue_treatments.csv")
str(trts)
```

```{r soil moisture hidden}
#| eval: false # Do not evaluate this chunk
#| echo: false # Do not show this chunk in the final rendered document

# path to where the load_MVE_data_into_R.R file is located - CHANGE THIS TO THE PATH ON YOUR COMPUTER
source("load_MVE_data_into_R.R")

process_mve <- function(site, year_to_process) {
  # process_mve function:
  # 
  # Takes raw .dat MVE files as input and produces a long version of the data the data
  # as output.
  #
  # Function arguments: 
  # site: "blue", "black", "creosote", "pj", "jsav" are the choices for site, entered into
  #        the function with quotes
  # year: 4-digit year (YYYY) entered into the function without quotes
  
  
  
  # subsets data to be >= to year requested here
  filter_to_year <- year_to_process
  
  
  # folder where final data will be written - CHANGE THIS TO THE PATH ON YOUR COMPUTER WHERE YOU 
  # WANT TO WRITE OUT THE PROCESSED FILES
  folder_out <- "MVE-seeds"
  

  # name of final output file for year of data being processed
  sub_file_name <- if (site == 'blue') {
    paste0("MVE_PlainsGrassland_SoilMoistureTemperature_", filter_to_year, ".csv")
  } else if (site == "black") {
    paste0("MVE_DesertGrassland_SoilMoistureTemperature_", filter_to_year, ".csv")
  } else if (site == "creosote") {
    paste0("MVE_Creosote_SoilMoistureTemperature_", filter_to_year, ".csv")
  } else if (site == "pj") {
    paste0("MVE_PJ_SoilMoistureTemperature_", filter_to_year, ".csv")
  } else if (site == "jsav") {
    paste0("MVE_JSav_SoilMoistureTemperature_", filter_to_year, ".csv")
  } 
  
  # load MVE data ------------------------------------------------------------
  
  
  file_to_load <- if (site == "blue") {
    "MVE_Blue.dat"
  } else if (site == "black") {
    "MVE_Black.dat"
  } else if (site == "creosote") {
    "MVE_Creosote.dat"
  } else if (site == "pj") {
    "MVE_PJ_Table1_52423_MVC_2023_05_24_10_49_50.dat"
  } else if (site == "jsav") {
    "MVE_JSAV_Table1_52423_MVC_2023_05_24_12_46_59.dat"
  } else {
    NULL
  }
  
  mve <- read_mve_in(file_to_load) |> 
    select(-RECORD)
  
  
  # Note: For Blue, data prior to 2022-10-04 08:00:00 needs to be loaded from a file
  # because the data loggers were reset to capture data from some new sensors that
  # were installed. 
  
  # loading file for old MVE Blue data - 
  mve_blue_old <- if (site == "blue") {
    read_mve_in("MVE_Blue.dat.backup") |> 
      mutate(VWC_P2_12_NEW = as.numeric(NA),               # Need to add these new variables as NAs to old data in order to combine with newer data
             VWC_P2_22_NEW = as.numeric(NA),
             VWC_P2_37_NEW = as.numeric(NA)) |> 
      select(-RECORD)
  } else {
    NULL
  }
  
  
  mve_sub <- if (site == "blue") {
    rbind(mve, mve_blue_old) |> 
      arrange(TIMESTAMP) |> 
      unique() |> 
      filter(year(TIMESTAMP) == filter_to_year)
  } else {
    mve |> 
      arrange(TIMESTAMP) |> 
      unique() |> 
      filter(year(TIMESTAMP) == filter_to_year)
  }
  
  
  
  
  mve_sub_long <- if (site == "blue") {
    mve_sub |> 
      pivot_longer(-TIMESTAMP, names_to = "sensor_id") |> 
      separate(sensor_id, into = c("sensor", "plot", "depth", "new"), sep = "_", remove = FALSE) 
  } else if (site == "black") {
    mve_sub |> 
      pivot_longer(-TIMESTAMP, names_to = "sensor_id") |> 
      separate(sensor_id, into = c("plot", "depth", "sensor", "avg"), sep = "_", remove = FALSE)
  } else if (site == "creosote") {
    mve_sub |> 
      pivot_longer(-TIMESTAMP, names_to = "sensor_id") |> 
      separate(sensor_id, into = c("sensor", "piece1", "piece2", "piece3", "avg"), sep = "_", remove = FALSE) |> 
      mutate(plot1split = ifelse(piece1 %in% c(2, 3), NA, piece1),
             plot2split = ifelse(piece2 %in% c(12, 22, 37), NA, piece2),
             depth1split = ifelse(piece2 %in% c(12, 22, 37), piece2, NA),
             depth2split = ifelse(piece3 %in% c(12, 22, 37), piece3, NA),
             plot_extra = ifelse(piece1 %in% c(2, 3), piece1, NA),
             plot = ifelse((!is.na(plot1split) & is.na(plot2split)), plot1split, plot2split),
             depth = ifelse((!is.na(depth1split) & is.na(depth2split)), depth1split, depth2split)) |> 
      select(-c(avg, piece1, piece2, piece3, plot1split, plot2split, depth1split, depth2split))
  } else if (site == "pj") {
    mve_sub |> 
      pivot_longer(-TIMESTAMP, names_to = "sensor_id") |> 
      separate(sensor_id, into = c("sensor", "piece1", "piece2", "piece3", "piece4"), sep = "_", remove = FALSE) |> 
      mutate(plot1split = ifelse(piece1 %in% c(2, 3), NA, piece1),
             plot2split = ifelse(piece2 %in% c(12, 22, 37), NA, piece2),
             depth1split = ifelse(piece2 %in% c(12, 22, 37), piece2, NA),
             depth2split = ifelse(piece3 %in% c(12, 22, 37), piece3, NA),
             plot_extra = ifelse(piece1 %in% c(2, 3), piece1, NA),
             plot = ifelse((!is.na(plot1split) & is.na(plot2split)), plot1split, plot2split),
             depth = ifelse((!is.na(depth1split) & is.na(depth2split)), depth1split, depth2split)) |> 
      select(-c(piece1, piece2, piece3, piece4, plot1split, plot2split, depth1split, depth2split))
  } else if (site == "jsav") {
    mve_sub |> 
      pivot_longer(-TIMESTAMP, names_to = "sensor_id") |> 
      separate(sensor_id, into = c("sensor", "piece1", "piece2", "piece3", "piece4"), sep = "_", remove = FALSE) |> 
      mutate(plot1split = ifelse(piece1 %in% c(2, 3), NA, piece1),
             plot2split = ifelse(piece2 %in% c(12, 22, 37), NA, piece2),
             depth1split = ifelse(piece2 %in% c(12, 22, 37), piece2, NA),
             depth2split = ifelse(piece3 %in% c(12, 22, 37), piece3, NA),
             plot_extra = ifelse(piece1 %in% c(2, 3), piece1, NA),
             plot = ifelse((!is.na(plot1split) & is.na(plot2split)), plot1split, plot2split),
             depth = ifelse((!is.na(depth1split) & is.na(depth2split)), depth1split, depth2split)) |> 
      select(-c(piece1, piece2, piece3, piece4, plot1split, plot2split, depth1split, depth2split))
  } else {
    NULL
  }
    
  write_csv(mve_sub_long, paste0(folder_out, sub_file_name))

  return(paste("Data processing complete for site", site, "for year", year_to_process))
  
  
}




# Note: you will get a warning message when running the function because of how the
# raw data is formatted and needs to be processed.

# running these functions writes processed data to the output folder - only need to do once
# for prior years, but need to run the current year each time you get new, updated raw data
process_mve("blue", 2023)
process_mve("blue", 2022)
process_mve("blue", 2021)
process_mve("blue", 2020)
process_mve("blue", 2019)
process_mve("blue", 2018)

sm_t_18 <- read_csv("MVE-seedsMVE_PlainsGrassland_SoilMoistureTemperature_2018.csv")
sm_t_19 <- read_csv("MVE-seedsMVE_PlainsGrassland_SoilMoistureTemperature_2019.csv")
sm_t_20 <- read_csv("MVE-seedsMVE_PlainsGrassland_SoilMoistureTemperature_2020.csv")
sm_t_21 <- read_csv("MVE-seedsMVE_PlainsGrassland_SoilMoistureTemperature_2021.csv")
sm_t_22 <- read_csv("MVE-seedsMVE_PlainsGrassland_SoilMoistureTemperature_2022.csv")
sm_t_23 <- read_csv("MVE-seedsMVE_PlainsGrassland_SoilMoistureTemperature_2023.csv")

```

```{r climate data hidden}
#| eval: false # Do not evaluate this chunk
#| echo: false # Do not show this chunk in the final rendered document

met_00_04 <- read_csv("https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-sev.1.17&entityid=371109f8068b35cf65edc8ba4237c8bd")
met_05_09 <- read_csv("https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-sev.1.17&entityid=e326dbe48c0cdc5b91496a469a50e36d")
met_10_14 <- read_csv("https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-sev.1.17&entityid=011fd6eb9726321cace6c72b50cb8056")
met_15_19 <- read_csv("https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-sev.1.17&entityid=76922a0b041ac5ab05be6132ff7f90d7")
met_20_23 <- read_csv("https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-sev.1.17&entityid=65056476604ff22cb44dcc3d3bebfd2a")

unique(met_00_04$StationID)
met_00_04_50 <- met_00_04 %>% 
  filter(StationID == 50) %>% 
  select(StationID,
         Date_Time,
         Date,
         Year,
         Month,
         Day_of_Month,
         Julian_Day,
         Hour,
         Temp_C,
         Min_Temp_C,
         Max_Temp_C,
         Precipitation)
unique(met_00_04_50$StationID)
str(met_00_04_50)

unique(met_05_09$StationID)
met_05_09_50 <- met_05_09 %>% 
  filter(StationID == 50) %>% 
  select(StationID,
         Date_Time,
         Date,
         Year,
         Month,
         Day_of_Month,
         Julian_Day,
         Hour,
         Temp_C,
         Min_Temp_C,
         Max_Temp_C,
         Precipitation)
unique(met_05_09_50$StationID)

unique(met_10_14$StationID)
met_10_14_50 <- met_10_14 %>% 
  filter(StationID == 50) %>% 
  select(StationID,
         Date_Time,
         Date,
         Year,
         Month,
         Day_of_Month,
         Julian_Day,
         Hour,
         Temp_C,
         Min_Temp_C,
         Max_Temp_C,
         Precipitation)
unique(met_10_14_50$StationID)

unique(met_15_19$StationID)
met_15_19_50 <- met_15_19 %>% 
  filter(StationID == 50) %>% 
  select(StationID,
         Date_Time,
         Date,
         Year,
         Month,
         Day_of_Month,
         Julian_Day,
         Hour,
         Temp_C,
         Min_Temp_C,
         Max_Temp_C,
         Precipitation)
unique(met_15_19_50$StationID)

unique(met_20_23$StationID)
met_20_23_50 <- met_20_23 %>% 
  filter(StationID == 50) %>% 
  select(StationID,
         Date_Time,
         Date,
         Year,
         Month,
         Day_of_Month,
         Julian_Day,
         Hour,
         Temp_C,
         Min_Temp_C,
         Max_Temp_C,
         Precipitation)
 unique(met_20_23_50$StationID)

 met_00_23_50 <- rbind(met_00_04_50,
      met_05_09_50,
      met_10_14_50,
      met_15_19_50,
      met_20_23_50)
 
 write_csv(met_00_23_50, "met_50.csv")
```

Read in cleaned up datasets.

```{r}
#| warning: false
#| message: false

blue_19_23 <- read_csv("germ_19_23.csv")

trts<-read.csv("meanvar_blue_treatments.csv")

sm_t_18 <- read_csv("MVE-seedsMVE_PlainsGrassland_SoilMoistureTemperature_2018.csv")
sm_t_19 <- read_csv("MVE-seedsMVE_PlainsGrassland_SoilMoistureTemperature_2019.csv")
sm_t_20 <- read_csv("MVE-seedsMVE_PlainsGrassland_SoilMoistureTemperature_2020.csv")
sm_t_21 <- read_csv("MVE-seedsMVE_PlainsGrassland_SoilMoistureTemperature_2021.csv")
sm_t_22 <- read_csv("MVE-seedsMVE_PlainsGrassland_SoilMoistureTemperature_2022.csv")
sm_t_23 <- read_csv("MVE-seedsMVE_PlainsGrassland_SoilMoistureTemperature_2023.csv")

met_00_23_50 <- read_csv("met_50.csv")
```

## Data Exploration

Our data objects are 'blue_19_23', 'trts',  'sm_t_18':'sm_t_23', 'met_00_23_50'.

```{r}
summary(blue_19_23)
# head(blue_19_23)
# str(blue_19_23)
sum(blue_19_23$Germ.binom, na.rm = TRUE)/(nrow(blue_19_23)-1)
```

Overall germination rate of 13.4% across five years, both treatments, both species. Columns are: Plot, Corner, Species, Row, Column, TP_ID, Add_Year, Obs_Date, and Germ.binom.

```{r}
# str(trts)
head(trts)
```

Treatments for mean-variance blue. Variance treatments flipped at random from 2019-2022.

```{r}
# summary(sm_t_20)
head(sm_t_20)
```
Sensor data for 18/30 plots at mean-variance blue. sensor_id contains sensor type (temperature or volumentric water content), plot, and sensor depth (12, 22, or 37 cm).

```{r}
summary(met_00_23_50)
# head(met_00_23_50)
# str(met_00_23_50)
```

Hourly climate data from Met Station 50, limited to date and time, temperature, and precipitation.

## Characterize and Graph Climate

The climate data are collected from meteorological stations at the Sevilleta NWR. These data come from met station 50, which is the nearest station to MVE Blue. Data began in 2000 and continues through 2023. Data is organized by date and time, temperature in celsius per hour, and minimum and maximum temperature for hour, total precipitation per hour in millimeters. I'm interested in the average range of temperatures for each season and the average annual and seasonal precipitation. Data comes from here(<https://portal.edirepository.org/nis/mapbrowse?packageid=knb-lter-sev.1.17>)

I want a graph where the x-axis is days of the year and there are three lines, each with confidence bands: average daily precip, daily high temperature, daily low temperature.

```{r}
#| message: false
#| warning: false

# str(met_00_23_50)

# Create Month-Yr variable
met_00_23_50$Month_Yr <- format(as.Date(met_00_23_50$Date), "%Y-%m")

# convert temperatures to fahrenheit
met_00_23_50$Min_Temp_F <- ((met_00_23_50$Min_Temp_C)*(9/5)) + 32
met_00_23_50$Max_Temp_F <- ((met_00_23_50$Max_Temp_C)*(9/5)) + 32

# summarize climate data by Month and Year
clim_sum <- met_00_23_50 %>% 
  group_by(Month, Year) %>% 
  summarise(sum_pp = sum(Precipitation),
            daily_min = min(Min_Temp_F),
            daily_max = max(Max_Temp_F))

clim_sum_pp <- clim_sum %>% 
  group_by(Month) %>% 
  summarise(mean_pp = mean(sum_pp, na.rm = TRUE))

clim_sum_max_t <- clim_sum %>% 
  group_by(Month) %>% 
  summarise(mean_max_t = mean(daily_max, na.rm = TRUE))
            
clim_sum_min_t <- clim_sum %>% 
  group_by(Month) %>% 
  summarise(mean_min_t = mean(daily_min, na.rm = TRUE))

clim_sum_2 <- full_join(clim_sum_pp,clim_sum_max_t, by = join_by(Month))
clim_sum_3 <- full_join(clim_sum_2,clim_sum_min_t, by = join_by(Month))
```


```{r}
#| message: false
#| warning: false

# Prep for figure

# Range for temperature axis
max(clim_sum_max_t$mean_max_t)
min(clim_sum_min_t$mean_min_t)

# colorblind friendly colors
colors <- viridis(3)

# factor to multiply 1st y-axis
coeff <- 2

clim_plot <- ggplot(clim_sum_3, aes(x = Month)) + 
  geom_point(aes(y = mean_pp), size = 1.5, color = colors[1]) +  
  geom_smooth(aes(y = mean_pp), size = 1.5, color = colors[1]) +
  geom_point(aes(y = mean_max_t/coeff), size = 1.5, color = colors[2]) +  
  geom_smooth(aes(y = mean_max_t/coeff), size = 1.5, color = colors[2]) +
  geom_point(aes(y = mean_min_t/coeff), size = 1.5, color = colors[2]) +  
  geom_smooth(aes(y = mean_min_t/coeff), size = 1.5, color = colors[2]) +
  #geom_line(aes(y = mean_pp), size = 1.5, color = '#00BFC4') + 
 # geom_line(aes(y = mean_max_t/coeff), size = 1.5, color = '#F8766D') +
  #geom_line(aes(y = mean_min_t/coeff), size = 1.5, color = '#C77CFF') +
  labs(
    #title = "Monthly Climate Averages from 2000-2023 at Great Plains Grassland Meteorological Station",
       x = "Month") +
  theme_bw() +
  theme(plot.title = element_text(size = 11),
        axis.title.y = element_text(color = colors[1], size=9),
        axis.title.y.right = element_text(color = colors[2], size=9),
        axis.title.x = element_text(size = 9),
        axis.text = element_text(size = 9)) +
  scale_x_continuous(breaks=seq(0,13,by=1)) +
  scale_y_continuous(
    name = "Average Monthly Total Precipitation (mm)", # Features of the first axis
    sec.axis = sec_axis( trans=~.*coeff, name="Average Daily Temperature High and Low (F)")) # Add 2nd axis & specify features
clim_plot

ggsave("F1_MVEBlue_climate.jpg", clim_plot)

# Replace month numbers with month names
# investigate rogue June precipitation

```

Figure 1. Climate averages for Meteorological Station 50 near Mean-Variance Blue Experiment from 2000-2023. Purple dots represent total monthly precipitation in millimeters, averaged over 2000-2023. Turquoise dots represent monthly average daily minimum and maximum temperatures in Fahrenheit from 2000-2023. Shaded regions represent 95% confidence intervals.

## Simple model of germination using Year and Treatments

Make a generalized linear mixed model with a binomial or bernoulli distribution and corner, plot, and block, and maybe Year as random effects. Possible fixed effects are species, mean treatment, variance treatment, Year, annual rainfall, or monsoon rainfall.

You'll need to remove toothpicks in the NW corner in 2019 since those were planted among adult blue grama grass to test facilitation. Consider removed 2019 altogether since it was planted so late. 

```{r}
#| message: false
#| warning: false

summary(blue_19_23)
head(blue_19_23)
str(blue_19_23)
sum(blue_19_23$Germ.binom, na.rm = TRUE)/(nrow(blue_19_23)-1)

head(trts)

# join treatments and germ dataset
trts$Plot <- trts$plot
blue_19_23_trt <- left_join(blue_19_23, trts, by = "Plot")

# prepare for model
# Remove toothpicks with Corner == NE and Add_Year == 2019
blue_19_23_trt_NE19rm <- 
  blue_19_23_trt %>%  
  filter(!(Add_Year == 2019 & Corner == "NE"))

# separate dataset by species
bluegrama <- 
  blue_19_23_trt_NE19rm %>% 
  filter(Species == "BLUE")

blackgrama <- 
  blue_19_23_trt_NE19rm %>% 
  filter(Species == "BLACK")
```


```{r}
#| eval: false # Do not evaluate this chunk
#| echo: false # Do not show this chunk in the final rendered document

# Try altogether first
m0 <- glmer(Germ.binom ~ 1 + (1|Block/Plot/Corner) + (1|Add_Year), family = binomial, data = blue_19_23_trt_NE19rm)

m0b <- glmer(Germ.binom ~ 1 + (1|Block/Plot/Corner), family = binomial, data = blue_19_23_trt_NE19rm)

m1 <- glmer(Germ.binom ~ mean_treatment + (1|Block/Plot/Corner) + (1|Add_Year), family = binomial, data = blue_19_23_trt_NE19rm)

m2 <- glmer(Germ.binom ~ var_treatment + (1|Block/Plot/Corner) + (1|Add_Year), family = binomial, data = blue_19_23_trt_NE19rm)

m3 <- glmer(Germ.binom ~ Species + (1|Block/Plot/Corner) + (1|Add_Year), family = binomial, data = blue_19_23_trt_NE19rm)

m4 <- glmer(Germ.binom ~ var_treatment + mean_treatment + (1|Block/Plot/Corner) + (1|Add_Year), family = binomial, data = blue_19_23_trt_NE19rm)

m5 <- glmer(Germ.binom ~ var_treatment + mean_treatment + mean_treatment*var_treatment + (1|Block/Plot/Corner) + (1|Add_Year), family = binomial, data = blue_19_23_trt_NE19rm)

m6 <- glmer(Germ.binom ~ Add_Year + (1|Block/Plot/Corner), family = binomial, data = blue_19_23_trt_NE19rm)

lrtest(m0,m6)
lrtest(m0b,m6)
ICtab(m0,m0b,m1,m2,m3,m4,m5,m6)
VarCorr(m0)
# Temporal and spatial heterogeneity explain a lot of the data

# No differences by treatments, not including species as a factor

# try blue grama
g0 <- glmer(Germ.binom ~ 1 + (1|Block/Plot/Corner) + (1|Add_Year), family = binomial, data = bluegrama)

g1 <- glmer(Germ.binom ~ mean_treatment + (1|Block/Plot/Corner) + (1|Add_Year), family = binomial, data = bluegrama)

g2 <- glmer(Germ.binom ~ var_treatment + (1|Block/Plot/Corner) + (1|Add_Year), family = binomial, data = bluegrama)

g3 <- glmer(Germ.binom ~ var_treatment + mean_treatment + (1|Block/Plot/Corner) + (1|Add_Year), family = binomial, data = bluegrama)

g4 <- glmer(Germ.binom ~ var_treatment + mean_treatment + mean_treatment*var_treatment + (1|Block/Plot/Corner) + (1|Add_Year), family = binomial, data = bluegrama)

lrtest(g0,g4)
ICtab(g0,g1,g2,g3,g4)
VarCorr(g0)

# try black grama
e0 <- glmer(Germ.binom ~ 1 + (1|Block/Plot/Corner) + (1|Add_Year), family = binomial, data = blackgrama)

e1 <- glmer(Germ.binom ~ mean_treatment + (1|Block/Plot/Corner) + (1|Add_Year), family = binomial, data = blackgrama)

e2 <- glmer(Germ.binom ~ var_treatment + (1|Block/Plot/Corner) + (1|Add_Year), family = binomial, data = blackgrama)

e3 <- glmer(Germ.binom ~ var_treatment + mean_treatment + (1|Block/Plot/Corner) + (1|Add_Year), family = binomial, data = blackgrama)

e4 <- glmer(Germ.binom ~ var_treatment + mean_treatment + mean_treatment*var_treatment + (1|Block/Plot/Corner) + (1|Add_Year), family = binomial, data = blackgrama)

lrtest(e0,e4)
ICtab(e0,e1,e2,e3,e4)
VarCorr(e0)


```
Mean and variance treatments are not significant predictors of germination for blue or black grama. The null model (constant germination) was the best fit for the data at this time.

Try including Year_added, monsoon rainfall, total precip, proportional precip (based on treatment), Quad_ID, mean_var.

We care about Year in that it might (likely does) interact with the treatment.

Try limiting to year planted or year after. So each cohort is each rain year.

Before doing this, skip to graphing

```{r new variables}


```


## Graph germination by year and treatments

Graph it so two panels are the two mean treatments and -axis are variance treatments bar graphs of estimated proportion of germination by species and year. 

```{r}
#| warning: false
#| message: false

blue_19_23_trt_NE19rm$p_hat <- blue_19_23_trt_NE19rm$Germ.binom/1

germ_summary <- blue_19_23_trt_NE19rm %>% 
  group_by(Add_Year, mean_treatment, var_treatment, Species) %>% summarize(avg_germ = mean(p_hat))

germ_summary_all <- blue_19_23_trt_NE19rm %>% 
  group_by(mean_treatment, var_treatment, Species) %>% summarize(avg_germ = mean(p_hat))

```

Plot all years together.
```{r}
ggplot(germ_summary_all, aes(x=var_treatment, y = avg_germ, group = Species, fill = Species, na.rm = TRUE)) + scale_fill_manual(values=c("black","cornflowerblue")) + geom_col(position = position_dodge()) + facet_grid(. ~ mean_treatment) + labs(x = "Variance Treatment", y = "Estimated Germination Probability") + theme_bw()
```
Species functionally the same for all treatments, no major differences between treatments but lowest germination in reduced mean and ambient variance treatment.

Break out each year.
```{r}
germ_yr <- ggplot(germ_summary, aes(x=var_treatment, y = avg_germ, group = Species, fill = Species, na.rm = TRUE)) + scale_fill_manual(values=c("black","cornflowerblue")) + geom_col(position = position_dodge()) + facet_grid(Add_Year ~ mean_treatment) + labs(x = "Variance Treatment", y = "Estimated Germination Probability") + theme_bw()
germ_yr

ggsave("GermxYear.jpg", germ_yr, width = 7, height = 12)
```

High interannual variation in germination between species and treatments. Could be due to rainfall and temperature differences by year. Back to models!


## Model Soil Moisture Germination Events

## Graph Soil Moisture Germination Events

## Model & Graph Survival

## Characterize Survival (Pulse or Press)

## Legacy Model & Graph
