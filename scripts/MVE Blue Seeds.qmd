---
title: "MVE Blue Seeds"
author: "Brooke Wainwright"
format: html
editor: visual
---

## Background

The Sevilleta Long Term Ecological Research (LTER) Program (Socorro, NM) rolled out a novel climate change experiment in 2019: the Mean-Variance Experiment (MVE). The experiment has been replicated in four ecosystems to date but the focus of this document is on the experimental infrastructure found in the Great Plains Grassland ecosystem, dominated by blue grama grass (*Bouteloua gracilis*). Hence Mean-Variance Blue or MVE Blue. The ecosystem is dominated by blue grama grass but the adjacent ecosystem, Chihuahuan Desert Grassland, is dominated by black grama grass (*Bouteloua eriopoda*). Great Plains Grassland extends northward throughout central North America while Chihuahuan Desert Grassland extends southward into Mexico. Thus, under a more arid climate, we would expect Chihuahuan Desert Grassland to expand it's range northward. The experimental infrastructure is set near the ecotone of these two ecosystems. More information on this experiment can be found here: <https://sevlter.unm.edu/mean-variance-experiment/>. To test the recruitment dynamics of these dominant plants under climate change, we added seeds of each species to the experimental plots from 2019-2023 and tracked their germination and survival biweekly during the growing season and monthly during the dormant season.

## Objectives

1.  Bring in seed monitoring data for all five years, bring in keys, bring in soil moisture data, bring in climate data.
2.  Explore data provide summary statistics.
3.  Create graph of typical climate (last 5-6 years) for temperature and precipitation.
4.  Separate monitoring data into germination and survival.
5.  Find the best model for the germination data using year and mean and variance treatments as predictors
6.  Graph germination by year, mean, and variance.
7.  Find best model of survival by species, year, and mean and variance treatments. Or a model for each species. Graph.
8.  Figure out the 1-3 events each year where 90-95% of germination occurs and isolate germination and soil moisture to those events and build a model to understand how soil moisture determines germination probability. Graph.
9.  Characterize die off/survival. Is it gradual and consistent or happen in major events like germination. Graph?
10. Figure out how to test for legacy effects on germination and/or survival. Graph.

## Setup

Read in necessary packages.

```{r}
#| message: false
#| warning: false
#| echo: false

library(readr)
library(dplyr)
library(tidyr)
library(tidyverse)
library(ggplot2)
library(viridis) # colorblind friendly color palette
library(reshape2)
library(vegan)
library(lme4)
library(car)
library(readxl)
library(googlesheets4)
```

## Read Data

Bring in seed monitoring data for all five years, bring in keys, bring in soil moisture data, bring in climate data.

```{r}
# bring in each year of data (2019-2023, 5 years total)

# De-authorize googlesheets to bypass log-in
googlesheets4::gs4_deauth()

# Load in the data from google drive (make loop or function)
blue_2019 <- as.data.frame(googlesheets4::read_sheet(
  ss="https://docs.google.com/spreadsheets/d/1BDSYfiaHBwYWqZEIeu27-rVX_AMyd407eGlDyf7hc6g/edit?gid=1889905658#gid=1889905658"))

blue_2020 <- as.data.frame(googlesheets4::read_sheet(
  ss="https://docs.google.com/spreadsheets/d/1RfcWQR4zSo-6zbAwZbR5s9DhxPF_gderfNvnlOFTxLE/edit#gid=974160277"))

blue_2021 <- as.data.frame(googlesheets4::read_sheet(
  ss="https://docs.google.com/spreadsheets/d/1Y6MBlHEawdBZKeywWfAKHqT4wDQxGLlTCyE1NG0Mfe8/edit#gid=1947016736"))

blue_2022 <- as.data.frame(googlesheets4::read_sheet(
  ss="https://docs.google.com/spreadsheets/d/1bixaeVyjCgqI7d3j5kNcQwR9zRAd9duY9ipoA2uWvaY/edit#gid=1207134008"))

blue_2023 <- as.data.frame(googlesheets4::read_sheet(
  ss="https://docs.google.com/spreadsheets/d/1712pb0TIKS5K3FU3-pRHc9oI3K6uavZMcF8a3YW8SHY/edit#gid=0"))

# Change column header dates to be readable by R (make loop or fxn)
names(blue_2019)[str_detect(names(blue_2019), "\\d{5}")] <- 
  format(as.Date(as.numeric(names(blue_2019)[str_detect(names(blue_2019), "\\d{5}")]), origin = "1899-12-30"), "%d-%b-%y")

names(blue_2020)[str_detect(names(blue_2020), "\\d{5}")] <- 
  format(as.Date(as.numeric(names(blue_2020)[str_detect(names(blue_2020), "\\d{5}")]), origin = "1899-12-30"), "%d-%b-%y")

names(blue_2021)[str_detect(names(blue_2021), "\\d{5}")] <- 
  format(as.Date(as.numeric(names(blue_2021)[str_detect(names(blue_2021), "\\d{5}")]), origin = "1899-12-30"), "%d-%b-%y")

names(blue_2022)[str_detect(names(blue_2022), "\\d{5}")] <- 
  format(as.Date(as.numeric(names(blue_2022)[str_detect(names(blue_2022), "\\d{5}")]), origin = "1899-12-30"), "%d-%b-%y")

names(blue_2023)[str_detect(names(blue_2023), "\\d{5}")] <- 
  format(as.Date(as.numeric(names(blue_2023)[str_detect(names(blue_2023), "\\d{5}")]), origin = "1899-12-30"), "%d-%b-%y")

# Give the cohort name for each dataframe (make loop or fxn)
blue_2019$Add_Year <- 2019
blue_2020$Add_Year <- 2020
blue_2021$Add_Year <- 2021
blue_2022$Add_Year <- 2022
blue_2023$Add_Year <- 2023

# convert columns to numeric (make loop or fxn)
blue_2019 <- blue_2019 %>%
  mutate(across( # mutate observations in multiple columns
    matches("\\d{1,2}-"), # that contain digits in the column name
    as.numeric)) 
blue_2020 <- blue_2020 %>%
  mutate(across( # mutate observations in multiple columns
    matches("\\d{1,2}-"), # that contain digits in the column name
    as.numeric)) 
blue_2021 <- blue_2021 %>%
  mutate(across( # mutate observations in multiple columns
    matches("\\d{1,2}-"), # that contain digits in the column name
    as.numeric)) 
blue_2022 <- blue_2022 %>%
  mutate(across( # mutate observations in multiple columns
    matches("\\d{1,2}-"), # that contain digits in the column name
    as.numeric)) 
blue_2023 <- blue_2023 %>%
  mutate(across( # mutate observations in multiple columns
    matches("\\d{1,2}-"), # that contain digits in the column name
    as.numeric)) 

# make TP ID (make loop or fxn)
blue_2019$TP_ID<- 
  with(blue_2019, 
       paste0(Add_Year, Plot, Species, Corner, Row, Column))
blue_2020$TP_ID<- 
  with(blue_2020, 
       paste0(Add_Year, Plot, Species, Corner, Row, Column))
blue_2021$TP_ID<- 
  with(blue_2021, 
       paste0(Add_Year, Plot, Species, Corner, Row, Column))
blue_2022$TP_ID<- 
  with(blue_2022, 
       paste0(Add_Year, Plot, Species, Corner, Row, Column))
blue_2023$TP_ID<- 
  with(blue_2023, 
       paste0(Add_Year, Plot, Species, Corner, Row, Column))

# pivot long (make loop or fxn)
blue_2019_long <-
  pivot_longer(blue_2019,
               cols = c("2019-09-07":"2019-10-13"),
               names_to = "Obs_Date",
               values_to = "Germ.binom") %>%
  mutate(Obs_Date=as.Date(Obs_Date,format="%Y-%m-%d")) # Format dates
unique(blue_2019_long$Obs_Date)
blue_2020_long <-
  pivot_longer(blue_2020,
               cols = c("7/31/2020":"6/2/2023"),
               names_to = "Obs_Date",
               values_to = "Germ.binom") %>%
  mutate(Obs_Date=as.Date(Obs_Date,format="%m/%d/%Y")) # Format dates
unique(blue_2020_long$Obs_Date)

str(blue_2021)
blue_2021_long <-
  pivot_longer(blue_2021,
               cols = c("2021-07-26":"2024-02-06"),
               names_to = "Obs_Date",
               values_to = "Germ.binom") %>%
  mutate(Obs_Date=as.Date(Obs_Date,format="%Y-%m-%d")) # Format dates
unique(blue_2021_long$Obs_Date)

blue_2022_long <-
  pivot_longer(blue_2022,
               cols = c("7/5/2022":"4/3/2024"),
               names_to = "Obs_Date",
               values_to = "Germ.binom") %>%
  mutate(Obs_Date=as.Date(Obs_Date,format="%m/%d/%Y")) # Format dates
unique(blue_2022_long$Obs_Date)

blue_2023_long <-
  pivot_longer(blue_2023,
               cols = c("2023-07-07":"2024-03-06"),
               names_to = "Obs_Date",
               values_to = "Germ.binom") %>%
  mutate(Obs_Date=as.Date(Obs_Date,format="%Y-%m-%d")) # Format dates
unique(blue_2023_long$Obs_Date)

# reduce germ to 1 (make loop or function)
blue_2019_long <-
  blue_2019_long %>%
  mutate(
    Germ.binom =
      case_when(
        Germ.binom == 1 ~ 1
        , Germ.binom == 2 ~ 1
        , Germ.binom == 3 ~ 1
        , Germ.binom == 0 ~ 0
      )
  )
blue_2020_long <-
  blue_2020_long %>%
  mutate(
    Germ.binom =
      case_when(
        Germ.binom == 1 ~ 1
        , Germ.binom == 2 ~ 1
        , Germ.binom == 3 ~ 1
        , Germ.binom == 0 ~ 0
      )
  )
blue_2021_long <-
  blue_2021_long %>%
  mutate(
    Germ.binom =
      case_when(
        Germ.binom == 1 ~ 1
        , Germ.binom == 2 ~ 1
        , Germ.binom == 3 ~ 1
        , Germ.binom == 0 ~ 0
      )
  )
blue_2022_long <-
  blue_2022_long %>%
  mutate(
    Germ.binom =
      case_when(
        Germ.binom == 1 ~ 1
        , Germ.binom == 2 ~ 1
        , Germ.binom == 3 ~ 1
        , Germ.binom == 0 ~ 0
      )
  )
blue_2023_long <-
  blue_2023_long %>%
  mutate(
    Germ.binom =
      case_when(
        Germ.binom == 1 ~ 1
        , Germ.binom == 2 ~ 1
        , Germ.binom == 3 ~ 1
        , Germ.binom == 0 ~ 0
      )
  )

# order by germ binom then by obs date in order to rm duplicates (make loop or function)
blue_2019_long <- blue_2019_long[order(-blue_2019_long$Germ.binom, blue_2019_long$Obs_Date), ]
blue_2020_long <- blue_2020_long[order(-blue_2020_long$Germ.binom, blue_2020_long$Obs_Date), ]
blue_2021_long <- blue_2021_long[order(-blue_2021_long$Germ.binom, blue_2021_long$Obs_Date), ]
blue_2022_long <- blue_2022_long[order(-blue_2022_long$Germ.binom, blue_2022_long$Obs_Date), ]
blue_2023_long <- blue_2023_long[order(-blue_2023_long$Germ.binom, blue_2023_long$Obs_Date), ]

# remove duplicates (make loop or function)
blue_2019_long <- blue_2019_long %>%
  distinct(TP_ID, Plot, Corner, Species, Row, Column, Add_Year, .keep_all = TRUE)
blue_2020_long <- blue_2020_long %>%
  distinct(TP_ID, Plot, Corner, Species, Row, Column, Add_Year, .keep_all = TRUE)
blue_2021_long <- blue_2021_long %>%
  distinct(TP_ID, Plot, Corner, Species, Row, Column, Add_Year, .keep_all = TRUE)
blue_2022_long <- blue_2022_long %>%
  distinct(TP_ID, Plot, Corner, Species, Row, Column, Add_Year, .keep_all = TRUE)
blue_2023_long <- blue_2023_long %>%
  distinct(TP_ID, Plot, Corner, Species, Row, Column, Add_Year, .keep_all = TRUE)

# Get each year ready fro rbind (make loop or fxn)

blue_2019_long <-
  blue_2019_long %>%
  select(
    Plot,
    Corner,
    Species,
    Row,
    Column,
    TP_ID,
    Add_Year,
    Obs_Date,
    Germ.binom
  )
blue_2020_long <-
  blue_2020_long %>%
  select(
    Plot,
    Corner,
    Species,
    Row,
    Column,
    TP_ID,
    Add_Year,
    Obs_Date,
    Germ.binom
  )
blue_2021_long <-
  blue_2021_long %>%
  select(
    Plot,
    Corner,
    Species,
    Row,
    Column,
    TP_ID,
    Add_Year,
    Obs_Date,
    Germ.binom
  )
blue_2022_long <-
  blue_2022_long %>%
  select(
    Plot,
    Corner,
    Species,
    Row,
    Column,
    TP_ID,
    Add_Year,
    Obs_Date,
    Germ.binom
  )
blue_2023_long <-
  blue_2023_long %>%
  select(
    Plot,
    Corner,
    Species,
    Row,
    Column,
    TP_ID,
    Add_Year,
    Obs_Date,
    Germ.binom
  )

blue_19_23 <- rbind(
  blue_2019_long,
  blue_2020_long,
  blue_2021_long,
  blue_2022_long,
  blue_2023_long
  )

### Bring in treatments

trts<-read.csv("meanvar_blue_treatments.csv")
str(trts)

### Bring in soil moisture data

# path to where the load_MVE_data_into_R.R file is located - CHANGE THIS TO THE PATH ON YOUR COMPUTER
source("load_MVE_data_into_R.R")

process_mve <- function(site, year_to_process) {
  # process_mve function:
  # 
  # Takes raw .dat MVE files as input and produces a long version of the data the data
  # as output.
  #
  # Function arguments: 
  # site: "blue", "black", "creosote", "pj", "jsav" are the choices for site, entered into
  #        the function with quotes
  # year: 4-digit year (YYYY) entered into the function without quotes
  
  
  
  # subsets data to be >= to year requested here
  filter_to_year <- year_to_process
  
  
  # folder where final data will be written - CHANGE THIS TO THE PATH ON YOUR COMPUTER WHERE YOU 
  # WANT TO WRITE OUT THE PROCESSED FILES
  folder_out <- "MVE-seeds"
  

  # name of final output file for year of data being processed
  sub_file_name <- if (site == 'blue') {
    paste0("MVE_PlainsGrassland_SoilMoistureTemperature_", filter_to_year, ".csv")
  } else if (site == "black") {
    paste0("MVE_DesertGrassland_SoilMoistureTemperature_", filter_to_year, ".csv")
  } else if (site == "creosote") {
    paste0("MVE_Creosote_SoilMoistureTemperature_", filter_to_year, ".csv")
  } else if (site == "pj") {
    paste0("MVE_PJ_SoilMoistureTemperature_", filter_to_year, ".csv")
  } else if (site == "jsav") {
    paste0("MVE_JSav_SoilMoistureTemperature_", filter_to_year, ".csv")
  } 
  
  # load MVE data ------------------------------------------------------------
  
  
  file_to_load <- if (site == "blue") {
    "MVE_Blue.dat"
  } else if (site == "black") {
    "MVE_Black.dat"
  } else if (site == "creosote") {
    "MVE_Creosote.dat"
  } else if (site == "pj") {
    "MVE_PJ_Table1_52423_MVC_2023_05_24_10_49_50.dat"
  } else if (site == "jsav") {
    "MVE_JSAV_Table1_52423_MVC_2023_05_24_12_46_59.dat"
  } else {
    NULL
  }
  
  mve <- read_mve_in(file_to_load) |> 
    select(-RECORD)
  
  
  # Note: For Blue, data prior to 2022-10-04 08:00:00 needs to be loaded from a file
  # because the data loggers were reset to capture data from some new sensors that
  # were installed. 
  
  # loading file for old MVE Blue data - 
  mve_blue_old <- if (site == "blue") {
    read_mve_in("MVE_Blue.dat.backup") |> 
      mutate(VWC_P2_12_NEW = as.numeric(NA),               # Need to add these new variables as NAs to old data in order to combine with newer data
             VWC_P2_22_NEW = as.numeric(NA),
             VWC_P2_37_NEW = as.numeric(NA)) |> 
      select(-RECORD)
  } else {
    NULL
  }
  
  
  mve_sub <- if (site == "blue") {
    rbind(mve, mve_blue_old) |> 
      arrange(TIMESTAMP) |> 
      unique() |> 
      filter(year(TIMESTAMP) == filter_to_year)
  } else {
    mve |> 
      arrange(TIMESTAMP) |> 
      unique() |> 
      filter(year(TIMESTAMP) == filter_to_year)
  }
  
  
  
  
  mve_sub_long <- if (site == "blue") {
    mve_sub |> 
      pivot_longer(-TIMESTAMP, names_to = "sensor_id") |> 
      separate(sensor_id, into = c("sensor", "plot", "depth", "new"), sep = "_", remove = FALSE) 
  } else if (site == "black") {
    mve_sub |> 
      pivot_longer(-TIMESTAMP, names_to = "sensor_id") |> 
      separate(sensor_id, into = c("plot", "depth", "sensor", "avg"), sep = "_", remove = FALSE)
  } else if (site == "creosote") {
    mve_sub |> 
      pivot_longer(-TIMESTAMP, names_to = "sensor_id") |> 
      separate(sensor_id, into = c("sensor", "piece1", "piece2", "piece3", "avg"), sep = "_", remove = FALSE) |> 
      mutate(plot1split = ifelse(piece1 %in% c(2, 3), NA, piece1),
             plot2split = ifelse(piece2 %in% c(12, 22, 37), NA, piece2),
             depth1split = ifelse(piece2 %in% c(12, 22, 37), piece2, NA),
             depth2split = ifelse(piece3 %in% c(12, 22, 37), piece3, NA),
             plot_extra = ifelse(piece1 %in% c(2, 3), piece1, NA),
             plot = ifelse((!is.na(plot1split) & is.na(plot2split)), plot1split, plot2split),
             depth = ifelse((!is.na(depth1split) & is.na(depth2split)), depth1split, depth2split)) |> 
      select(-c(avg, piece1, piece2, piece3, plot1split, plot2split, depth1split, depth2split))
  } else if (site == "pj") {
    mve_sub |> 
      pivot_longer(-TIMESTAMP, names_to = "sensor_id") |> 
      separate(sensor_id, into = c("sensor", "piece1", "piece2", "piece3", "piece4"), sep = "_", remove = FALSE) |> 
      mutate(plot1split = ifelse(piece1 %in% c(2, 3), NA, piece1),
             plot2split = ifelse(piece2 %in% c(12, 22, 37), NA, piece2),
             depth1split = ifelse(piece2 %in% c(12, 22, 37), piece2, NA),
             depth2split = ifelse(piece3 %in% c(12, 22, 37), piece3, NA),
             plot_extra = ifelse(piece1 %in% c(2, 3), piece1, NA),
             plot = ifelse((!is.na(plot1split) & is.na(plot2split)), plot1split, plot2split),
             depth = ifelse((!is.na(depth1split) & is.na(depth2split)), depth1split, depth2split)) |> 
      select(-c(piece1, piece2, piece3, piece4, plot1split, plot2split, depth1split, depth2split))
  } else if (site == "jsav") {
    mve_sub |> 
      pivot_longer(-TIMESTAMP, names_to = "sensor_id") |> 
      separate(sensor_id, into = c("sensor", "piece1", "piece2", "piece3", "piece4"), sep = "_", remove = FALSE) |> 
      mutate(plot1split = ifelse(piece1 %in% c(2, 3), NA, piece1),
             plot2split = ifelse(piece2 %in% c(12, 22, 37), NA, piece2),
             depth1split = ifelse(piece2 %in% c(12, 22, 37), piece2, NA),
             depth2split = ifelse(piece3 %in% c(12, 22, 37), piece3, NA),
             plot_extra = ifelse(piece1 %in% c(2, 3), piece1, NA),
             plot = ifelse((!is.na(plot1split) & is.na(plot2split)), plot1split, plot2split),
             depth = ifelse((!is.na(depth1split) & is.na(depth2split)), depth1split, depth2split)) |> 
      select(-c(piece1, piece2, piece3, piece4, plot1split, plot2split, depth1split, depth2split))
  } else {
    NULL
  }
    
  write_csv(mve_sub_long, paste0(folder_out, sub_file_name))

  return(paste("Data processing complete for site", site, "for year", year_to_process))
  
  
}




# Note: you will get a warning message when running the function because of how the
# raw data is formatted and needs to be processed.

# running these functions writes processed data to the output folder - only need to do once
# for prior years, but need to run the current year each time you get new, updated raw data
process_mve("blue", 2023)
process_mve("blue", 2022)
process_mve("blue", 2021)
process_mve("blue", 2020)
process_mve("blue", 2019)
process_mve("blue", 2018)


# Bring in climate data


```

## Data Exploration

## Characterize Climate

## Germination & Survival (Separate)

## Simple model of germination using Year and Treatments

## Graph germination by year and treatments

## Model & Graph Survival

## Model Soil Moisture Germination Events

## Graph Soil Moisture Events

## Characterize Survival (Pulse or Press)

## Legacy Model & Graph
